# Generated by Django 3.2.8 on 2021-12-05 16:22

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MatchingEntry',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='matching_entry', serialize=False, to='auth.user')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('album_artist', models.CharField(help_text='What is the artist of the album?', max_length=256)),
                ('album_name', models.CharField(help_text='What is the name of the album?', max_length=256)),
                ('album_image_small_url', models.CharField(blank=True, max_length=256, validators=[django.core.validators.URLValidator])),
                ('album_image_medium_url', models.CharField(blank=True, max_length=256, validators=[django.core.validators.URLValidator])),
                ('album_image_large_url', models.CharField(blank=True, max_length=256, validators=[django.core.validators.URLValidator])),
                ('album_image_xlarge_url', models.CharField(blank=True, max_length=256, validators=[django.core.validators.URLValidator])),
                ('album_lastfm_url', models.CharField(blank=True, max_length=256, validators=[django.core.validators.URLValidator])),
                ('album_lastfm_should_rerun', models.BooleanField()),
                ('album_description', models.TextField(help_text='How would you describe your album?')),
                ('artist_1_name', models.CharField(help_text='What artists do you recommend?', max_length=256)),
                ('artist_2_name', models.CharField(help_text='What artists do you recommend?', max_length=256)),
                ('talkativity_preference', models.CharField(choices=[('Talking', 'Talking and Recommendation'), ('Rec Only', 'Recommendation Only'), ('Networking', 'Networking')], help_text='What do you want to get out of the exchange?', max_length=15)),
                ('minds_talking', models.IntegerField(help_text='If you were matched with a non-musician person who wants to have a chat, how happy would you be from 0 (very unhappy) to 5 (very happy and willing to chat)?', validators=[django.core.validators.MinValueValidator(0, "Can't be less than 0"), django.core.validators.MaxValueValidator(5, "Can't be greater than 5")])),
                ('minds_not_talking', models.IntegerField(help_text="If you were matched with a non-musician person who doesn't want to have a chat, how happy would you be from 0 (very unhappy) to 5 (very happy and willing to just get a recommendation)?", validators=[django.core.validators.MinValueValidator(0, "Can't be less than 0"), django.core.validators.MaxValueValidator(5, "Can't be greater than 5")])),
                ('adventurous', models.IntegerField(help_text='To what extent do you agree with the statement "I\'m adventurous and want to try something very new" from 0 (not adventurous) to 5 (very adventurous)', validators=[django.core.validators.MinValueValidator(0, "Can't be less than 0"), django.core.validators.MaxValueValidator(5, "Can't be greater than 5")])),
                ('person_above_adventure', models.IntegerField(help_text='To what extent do you agree with the statement "I want to find another person who listens to my type of music, even if I already know the album" from 0 (please don\'t give me an album I know) to 5 (woop woop shared music buddies)', validators=[django.core.validators.MinValueValidator(0, "Can't be less than 0"), django.core.validators.MaxValueValidator(5, "Can't be greater than 5")])),
                ('match_description', models.TextField(help_text='What kind of album would you like to be matched with?')),
                ('what_get_out', models.TextField(blank=True, help_text='What do you want to get out of this?')),
            ],
            options={
                'verbose_name_plural': 'Matching Entries',
                'permissions': [('is_matcher', 'Can make matching suggestions'), ('is_moderator', 'Can moderate matching suggestions')],
            },
        ),
        migrations.CreateModel(
            name='MatchingTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('tagtype', models.CharField(max_length=256)),
                ('describes_album', models.BooleanField(help_text='Does this tag describe the album (true) or what the matcher wants in their match (false)?')),
                ('matching_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='all_tags', to='matching.matchingentry')),
            ],
        ),
    ]
